apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

final String vcProvider = 'github'
final String vcProviderUser = 'tmtron'
final String vcProviderProject = 'enum-mapper'
final String vcGithubRepo = "${vcProviderUser}/${vcProviderProject}"
// e.g. https://github.com/tmtron/enum-mapper
final String vcProviderUrl = "https://${vcProvider}.com/${vcProviderUser}/${vcProviderProject}"
final String vcProviderIssuesUrl = "${vcProviderUrl}/issues"
final String vcProviderScmUrl = "scm:git:${vcProviderUrl}.git"
final String bintrayPackage = "com.tmtron.${vcProviderProject}"

bintray {
    // defined in ~/.gradle/gradle.properties
    user = "$bintray_user"
    key = "$bintray_api_key"
    setPublications('PublicationTmtron')
    pkg {
        repo = 'maven'
        name = bintrayPackage
        desc = "$project.description"
        licenses = ['Apache-2.0']
        websiteUrl = vcProviderUrl
        issueTrackerUrl = vcProviderIssuesUrl
        vcsUrl = vcProviderScmUrl

        githubRepo = vcGithubRepo
        githubReleaseNotesFile = 'README.md' //Optional Github readme file

        version {
            name = "$project.version"
            desc = "Version ${project.version}"
            released = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
    // whether to run this as dry-run, without deploying
    setDryRun(bintrayDryRun)
}

if (!bintrayDryRun) {
    if ("$project.version".endsWith('-SNAPSHOT')) {
        throw new GradleException("BinTray: uploading s snapshot version " +
                ">$project.version< is not allowed!" +
                "\nChange the version number or set ext.bintrayDryRun=true")
    }
}

bintrayUpload.doLast {
    if (bintrayDryRun) {
        System.err.println "BinTray: DryRun is true!"
    }
}

/* create a jar for sources and java-docs
 * http://stackoverflow.com/a/11475089/6287240
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

jar.dependsOn sourcesJar
jar.dependsOn javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Create the pom configuration:
final pomConfig = {
    licenses {
        // we need to use license([:])
        // see http://stackoverflow.com/questions/43820811/using-the-bintray-plugin-and-license-gradle-plugin-together
        license([:]) {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "martin"
            name "Martin"
            email "martin@tmtron.com"
        }
    }
    scm {
        connection vcProviderScmUrl
        developerConnection vcProviderScmUrl
        url "${vcProviderUrl}/tree/master"
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        PublicationTmtron(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            // note: the defaults for groupId, artifactId, version are okay
            // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html#N1ACB3

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', "${project.group}:${project.name}")
                root.appendNode('url', vcProviderUrl)
                root.children().last() + pomConfig
            }
        }
    }
}
